#!/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/bin/ruby
#
# Part of this code is modified from the Homebrew package manager.
# This is their copyright below.  Modifications are licensed under the 
# same license by Appcelerator, Inc.
#
# Copyright 2009-2014 Max Howell and other contributors.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

modules = %w(titanium tio2 acs alloy triple gittio tishadow)

module Tty extend self
  def blue; bold 34; end
  def white; bold 39; end
  def red; underline 31; end
  def yellow; bold 33; end
  def reset; escape 0; end
  def bold n; escape "1;#{n}" end
  def underline n; escape "4;#{n}" end
  def escape n; "\033[#{n}m" if STDOUT.tty? end
end

class Array
  def shell_s
    cp = dup
    first = cp.shift
    cp.map{ |arg| arg.gsub " ", "\\ " }.unshift(first) * " "
  end
end

def ohai *args
  puts "#{Tty.blue}==>#{Tty.white} #{args.shell_s}#{Tty.reset}"
end

def warn warning
  puts "#{Tty.red}Warning#{Tty.reset}: #{warning.chomp}"
end

def system *args
  abort "Failed during: #{args.shell_s}" unless Kernel.system(*args)
end

def sudo *args
  ohai "Running /usr/bin/sudo", *args
  system "/usr/bin/sudo", *args
end

def getc  # NOTE only tested on OS X
  system "/bin/stty raw -echo"
  if STDIN.respond_to?(:getbyte)
    STDIN.getbyte
  else
    STDIN.getc
  end
ensure
  system "/bin/stty -raw echo"
end

def wait_for_user
  puts
  puts "Press RETURN to continue or any other key to abort"
  c = getc
  # we test for \r and \n because some stuff does \r instead
  abort unless c == 13 or c == 10
end

module Version
  def <=>(other)
    split(".").map { |i| i.to_i } <=> other.split(".").map { |i| i.to_i }
  end
end

def macos_version
  @macos_version ||= `/usr/bin/sw_vers -productVersion`.chomp[/10\.\d+/].extend(Version)
end

def nodejs
  @node ||= if ENV['NODE'] and File.executable? ENV['NODE']
    ENV['NODE']
  elsif Kernel.system '/usr/bin/which -s node'
    'node'
  else
    exe = `xcrun -find node 2>/dev/null`.chomp
    exe if $? && $?.success? && !exe.empty? && File.executable?(exe)
  end

  abort "Couldn't find nodejs. Please install from http://nodejs.org/ and continue again." unless @node

  `#{@node} --version` =~ /v(\d\.\d+\.\d+)/
  return if $1.nil? 

  abort "#{@node} version (#{$1}) is too old. Please upgrade and continue again." if $1.extend(Version) < "0.10.0"

  @node
end

def npm
  @npm ||= if ENV['NPM'] and File.executable? ENV['NPM']
    ENV['NPM']
  elsif Kernel.system '/usr/bin/which -s npm'
    'npm'
  else
    exe = `xcrun -find npm 2>/dev/null`.chomp
    exe if $? && $?.success? && !exe.empty? && File.executable?(exe)
  end

  abort "Couldn't find npm. Please install from http://nodejs.org/ and continue again." unless @node

  @npm
end

# Invalidate sudo timestamp before exiting
at_exit { Kernel.system "/usr/bin/sudo", "-k" }


####################################################################### script
#abort "See Linuxbrew: http://brew.sh/linuxbrew/" if /linux/i === RUBY_PLATFORM
abort "MacOS too old, sorry" if macos_version < "10.5"
abort "Don't run this as root!" if Process.uid == 0
abort <<-EOABORT unless `groups`.split.include? "admin"
This script requires the user #{ENV['USER']} to be an Administrator. If this
sucks for you then you can install Appcelerator in your home directory or however
you please; please refer to our homepage. If you still want to use this script
set your user to be an Administrator in System Preferences or `su' to a
non-root user with Administrator privileges.
EOABORT

ohai "Checking system requirements ..."

# check node
node = nodejs
node_version = `#{node} --version`.chomp
ohai "node.js version is #{Tty.red}#{node_version}#{Tty.reset}"

# check xcode
if macos_version < "10.9" and macos_version > "10.6"
  `/usr/bin/cc --version 2> /dev/null` =~ %r[clang-(\d{2,})]
  version = $1.to_i
  puts "Install the #{Tty.white}Command Line Tools for Xcode#{Tty.reset}: https://developer.apple.com/downloads" if version < 425
else
  puts "Install #{Tty.white}Xcode#{Tty.reset}: https://developer.apple.com/xcode" unless File.exist? "/usr/bin/cc"
end

if macos_version >= "10.9"
  developer_dir = `/usr/bin/xcode-select -print-path 2>/dev/null`.chomp
  ohai "xcode directory is #{Tty.red}#{developer_dir}#{Tty.reset}"
  if developer_dir.empty? || !File.exist?("#{developer_dir}/usr/bin/git")
    ohai "Installing the Command Line Tools (expect a GUI popup):"
    sudo "/usr/bin/xcode-select", "--install"
    puts "Press any key when the installation has completed."
    getc
  end
end

sudo npm, "install", "-g", *modules

puts
ohai "Installation successful! Installed the following:"
puts
puts "   #{Tty.yellow}#{modules.join(' ')}#{Tty.reset}"
puts 

`ti info -t titanium,iphone -o json --no-banner >/tmp/tienv`
tisdk=`#{node} -e 'fs=require("fs");var ti=JSON.parse(fs.readFileSync("/tmp/tienv").toString());console.log(ti.titaniumCLI&&ti.titaniumCLI.selectedSDK||ti.titanium&&Object.keys(ti.titanium).length&&Object.keys(ti.titanium)[0]||"");'`.chomp
if !tisdk.empty? and tisdk.extend(Version) >= '3.3.0'
  ohai "Installed Titanium SDK is #{Tty.red}#{tisdk}#{Tty.reset}"
  puts
  puts "   Run #{Tty.yellow}triple http://bit.ly/1lFdZDH#{Tty.reset} to test your environment"
else
  ohai "Next steps"
  puts
  puts "   Run #{Tty.yellow}ti setup#{Tty.reset} to setup your Titanium environment."
  puts "   Run #{Tty.yellow}ti sdk install latest"
  puts "   Run #{Tty.yellow}triple http://bit.ly/1lFdZDH#{Tty.reset} to test your environment"
  puts "   Run #{Tty.yellow}acs login#{Tty.reset} to login to Appcelerator Cloud."
end


puts
exit 0
